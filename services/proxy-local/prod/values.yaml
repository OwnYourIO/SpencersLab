seaweedfs-csi-driver:
  seaweedfsFiler: OVERRIDE_VIA_CUSTOM_VALUES

bitwardenIds:
  argocd-sso-secret: OVERRIDE_VIA_CUSTOM_VALUES
  autossh-secret: OVERRIDE_VIA_CUSTOM_VALUES

authRealm: OVERRIDE_VIA_CUSTOM_VALUES

domain: OVERRIDE_VIA_APPSET
clusterName: OVERRIDE_VIA_APPSET

proxy:
  middlewares: 
    entrypoint: "kube-system-crowdsec@kubernetescrd"
    userAuth: "kube-system-oidc-keycloak@kubernetescrd"
    allowList: "user-allowlist@file"
    allowListRemote: "user-allowlist-remote@file"

  subdomains:
    # Infrastructure
    login:
      middlewares: "kube-system-crowdsec@kubernetescrd,default-password-req-rewrite@kubernetescrd"
      ingressRoute:
        middlewares:
          - "kube-system-crowdsec@kubernetescrd"
          - "default-password-req-rewrite@kubernetescrd"

    registration:
      target: login
      middlewares: "kube-system-crowdsec@kubernetescrd,default-redirect-registration@kubernetescrd"
      redirect:
        # This assumes a fair amount and may need to be broken down.
        #   - using Keycloak 
        #   - client_id "traefik" configured
        #   - want to finish the process at player.$domain. 
        subdomain: login
        path: "/realms/$.Values.authRealm/protocol/openid-connect/registrations?client_id=traefik&scope=openid%20profile&response_type=code&redirect_uri=https%3A%2F%2Fplayer.$.Values.domain/sso/OID/start/login.$.Values.domain"
        status: 
          - "404"

    # Has SSO & companion app (and thus needs a redirect)
    player:
      target: jellyfin
      ssoRedirectPath: "/sso/OID/start/login.$.Values.domain"
    audiobook-player:
      target: audiobookshelf
      ssoRedirectPath: "/auth/openid?callback=https://audiobook-player.$.Values.domain/login"
    pictures:
      target: immich
    documents:
      target: paperless
    music-player:
      target: lms
      #target: music-assistant
    #home:
    #esphome:

    # Has just SSO
    boards:
      target: wekan
    git:
      target: gitea
    charts:
      target: grafana

    torrents:
      target: qbittorrent
    requests:
      target: requestarr
    music:
      target: lidarr
    shows:
      target: sonarr
    shows-4k:
      target: sonarr-4k
    movies:
      target: radarr
    movies-4k:
      target: radarr-4k
    ebooks:
      target: readarr
    audiobooks:
      target: readarr-audio
    streams:
      target: pinchflat
    stream:
      target: metube

    cluster:
      clusterBase: true
      service: base-argocd-server
      port: 80
    traefik:
      clusterBase: true
      namespace: kube-system
      service: traefik
      port: 80

external-dns-external:
  interval: 2m
  provider: cloudflare
  env:
    - name: CF_API_EMAIL
      valueFrom:
        secretKeyRef:
          name: cert-manager-solver-token
          key: email
    - name: CF_API_TOKEN
      valueFrom:
        secretKeyRef:
          name: cert-manager-solver-token
          key: password
  extraArgs:
    - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
    - --crd-source-kind=DNSEndpoint
    - "--label-filter=external-dns=enabled"
  policy: sync
  sources:
    - ingress
    - crd
  txtPrefix: "k8s.proxy-local"
  serviceMonitor:
    enabled: true
  resources:
    requests:
      memory: 100Mi
      cpu: 25m
    limits:
      memory: 250Mi

autossh:
  global:
    nameOverride: "autossh"
  defaultPodOptions:
    restartPolicy: Always
  controllers:
    main:
      containers:
        main:
          image:
            repository: ghcr.io/camptocamp/autossh
            tag: master

          env:
            TZ: America/Denver
            SSH_REMOTE_USER: proxy
            SSH_KEY: 
              secretKeyRef:
                name: autossh
                key: private-key
            # TODO: Make this generic.
            SSH_REMOTE_HOST: proxy-remote.spencerslab.com
            SSH_REMOTE_PORT: 2222
            SSH_TUNNEL_PORT: 443
            SSH_TARGET_HOST: traefik.kube-system
            SSH_TARGET_PORT: 443
            SSH_BIND_IP: 0.0.0.0
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              memory: 8Gi
      pod:
        securityContext:
          # Pod required to be root, otherwise it's work on /etc/passwd can't happen.
          #runAsUser: 1000
          #runAsGroup: 1000
          fsGroup: 1000
          fsGroupChangePolicy: "OnRootMismatch"
          supplementalGroups: [1000]

qbittorrent:
  global:
    nameOverride: "qbittorrent"
  controllers:
    main:
      # Not using vuetorrent, so disabling.
      #initContainers:
      #  install-vuetorrent:
      #    image: 
      #      repository: busybox
      #      tag: 1.36.1@sha256:c3839dd800b9eb7603340509769c43e146a74c63dca3045a8e7dc8ee07e53966
      #    command:
      #      - "/bin/sh"
      #      - -c
      #    args:
      #      - |
      #        # renovate: github-release depName=WDaan/VueTorrent
      #        VUETORRENT_VERSION="v2.8.0"
      #        rm -rf /config/vuetorrent
      #        busybox wget -qO- "https://github.com/WDaan/VueTorrent/releases/download/$${VUETORRENT_VERSION}/vuetorrent.zip" | busybox unzip -d /config -
      containers:
        main:
          image:
            repository: ghcr.io/onedr0p/qbittorrent
            tag: 5.0.3

          env:
            TZ: America/Denver
            QBITTORRENT__PORT: &port 8080
            QBITTORRENT__BT_PORT: &port-bt 58462
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              memory: 8Gi
      pod:
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
          fsGroupChangePolicy: "OnRootMismatch"
          supplementalGroups: [10000]

  service:
    main:
      controller: main
      ports:
        http:
          port: *port
    bittorent:
      enabled: true
      controller: main
      type: LoadBalancer
      ports:
        bittorrent:
          enabled: true
          port: *port-bt
          protocol: TCP
          targetPort: *port-bt
      externalTrafficPolicy: Local

  ingress:
    main:
      enabled: true
      hosts:
        - host: "qbittorrent.spencerslab.com"
          paths:
            - path: /
              pathType: Prefix
              service: 
                identifier: main
                port: http
      tls:
        - secretName: wildcard-cert
          hosts:
            - "qbittorrent.spencerslab.com"

  persistence:
    config:
      enabled: true
      existingClaim: qbittorrent
      globalMounts:
        - path: /config

    media:
      enabled: true
      existingClaim: media
      advancedMounts:
        main:
          main:
          - path: /media


pinchflat:
  global:
    nameOverride: "pinchflat"
  controllers:
    pinchflat:
      containers:
        app:
          image:
            repository: ghcr.io/kieraneglin/pinchflat
            tag: v2024.12.31
          env:
            TZ: America/Denver
            TZ_DATA_DIR: /tmp/elixir_tz_data
            MEDIA_PATH: /media
            CONFIG_PATH: /config
            #TMPFILE_PATH: /tmp
            PORT: &port 80
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /healthcheck
                  port: *port
                initialDelaySeconds: 0
                periodSeconds: 10
                timeoutSeconds: 1
                failureThreshold: 3
            readiness: *probes
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities: { drop: ["ALL"] }
          resources:
            requests:
              cpu: 10m
            #limits:
              #gpu.intel.com/i915: 1
              #memory: 4Gi
  defaultPodOptions:
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      fsGroupChangePolicy: OnRootMismatch
      supplementalGroups: [44, 10000]
      seccompProfile: { type: RuntimeDefault }
    #nodeSelector:
    #  intel.feature.node.kubernetes.io/gpu: "true"
  service:
    app:
      controller: pinchflat
      ports:
        http:
          port: *port
  ingress:
    app:
      hosts:
        - host: "pinchflat.spencerslab.com"
          paths:
            - path: /
              service:
                identifier: app
                port: http
  persistence:
    config:
      existingClaim: pinchflat
    tmp:
      type: emptyDir
    # This is needed because even though I'm mounting to /media, the image scans /downloads for privs.
    downloads:
      type: emptyDir
    ytdlp:
      type: emptyDir
      globalMounts:
        - path: /etc/yt-dlp
    media:
      existingClaim: media
      globalMounts:
        - path: /media/

metube:
  global:
    nameOverride: "metube"
  controllers:
    metube:
      labels:
        nfsMount: "true"
      annotations:
        reloader.stakater.com/auto: "true"
      containers:
        app:
          image:
            repository: ghcr.io/alexta69/metube
            tag: 2024-05-28@sha256:412790e1c97455487e75cb77cfb8ce5801fbf0a2782ee43adcb78096f8fcc161
          env:
            TZ: "America/Denver"
            DOWNLOAD_DIR: "/media/Streams"
            STATE_DIR: "/media/Streams/.metube"
            YTDL_OPTIONS: '{"http_headers":{"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0"}}'
  defaultPodOptions:
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      fsGroupChangePolicy: OnRootMismatch
      supplementalGroups: [10000]
      seccompProfile: { type: RuntimeDefault }
  service:
    app:
      controller: metube
      ports:
        http:
          port: 8081
  ingress:
    app:
      hosts:
        - host: "metube.spencerslab.com"
          paths:
            - path: /
              service:
                identifier: app
                port: http
  persistence:
    media:
      existingClaim: media
      globalMounts:
        - path: /media/
