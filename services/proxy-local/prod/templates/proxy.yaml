{{ range $name, $config := .Values.proxy.subdomains }}
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ $name }}-service"
  namespace: default
spec:
  type: ExternalName
  # This is the destination of the proxy. 
  # By convention it should be the application name while the incoming traffic should be from a generic URL
  externalName: "{{ $config.target | default $name }}.{{ $.Values.domain }}"
  ports:
    - port: 443

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{ $name }}-ingress"
  namespace: default
  annotations:
    traefik.ingress.kubernetes.io/router.middlewares: {{ $.Values.proxy.middlewares }}
    external-dns.alpha.kubernetes.io/target: "proxy-remote.{{ $.Values.domain }}"
  labels:
    external-dns: "enabled"
spec:
  tls:
    - hosts:
      - "{{ $name }}.{{ $.Values.domain }}"
      secretName: wildcard-cert
  rules:
    - host: "{{ $name }}.{{ $.Values.domain }}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: "{{ $name }}-service"
                port:
                  number: 443
...

---
{{ if $config.sso }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{ $name }}-sso-ingress"
  namespace: default
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.middlewares: kube-system-crowdsec@kubernetescrd
spec:
  tls:
    - hosts:
      - "{{ $name }}.{{ $.Values.domain }}"
      secretName: wildcard-cert
  rules:
    - host: "{{ $name }}.{{ $.Values.domain }}"
      http:
        paths:
          - path: {{ $config.sso.path }}
            pathType: Exact
            backend:
              service:
                name: "{{ $name }}-service"
                port:
                  number: 443
...
{{ end }}

---
{{ if $config.redirect }}
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: redirect-{{ $name }}
spec:
  plugin:
    traefik-plugin-redirect-on-status:
      redirectCode: {{ coalesce (get $config.redirect "code") (get $config.ssoRedirect "code") "307" | quote }}
      redirectUri: {{ coalesce $config.redirect.uri $config.ssoRedirect }}
      status:
        {{ range $config.redirect.status }}
        - {{ . | quote }}
        {{- end }}
...
{{ end }}

# This is mostly used to detect local traffic and force it to use the local middleware rather than remote.
---
{{ if $config.ingressRoute }}
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: "{{ $name }}-proxied-ingress"
  namespace: default
spec:
  entryPoints:
    - web
    - websecure
  tls:
    secretName: wildcard-cert
  routes:
    # TODO: Turn the ClientIPCheck into a values list that generates ClientIP per 
    #- match: Host(`{{ $name }}.{{ $.Values.domain }}`) && ClientIP(`{{ $config.ingressRoute.clientIP }}`)
    - match: Host(`{{ $name }}.{{ $.Values.domain }}`) && (ClientIP(`10.0.0.0/16`) || ClientIP(`192.168.0.0/16`))
      kind: Rule
      services:
        - name: "{{ $name }}-service"
          port: 443
      middlewares:
      {{ range $config.ingressRoute.middlewares }}
        - name: {{ . }}
      {{ end }}
...
{{ end }}
...
{{ end }}
