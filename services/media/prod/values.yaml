bitwardenIds:

seaweedfs-csi-driver:
  seaweedfsFiler: "seaweedfs-filer.infra.spencerslab.com:8880,seaweedfs-filer.infra.spencerslab.com:8881,seaweedfs-filer.infra.spencerslab.com:8882,seaweedfs-filer.infra.spencerslab.com:8883,seaweedfs-filer.infra.spencerslab.com:8884"

domain: OVERRIDE_VIA_APPSET
clusterName: OVERRIDE_VIA_APPSET

ingress:
  subdomains:
    player:
      serviceName: jellyfin
      service: media-jellyfin
      port: 8096

    audiobook-player:
      serviceName: audiobookshelf
      service: media-audiobookshelf
      port: 8080

    requests:
      serviceName: jellyseerr
      service: media-jellyseerr
      port: 5055

    music:
      serviceName: lidarr
      service: media-lidarr
      port: 8686

    trackers:
      serviceName: prowlarr
      service: media-prowlarr
      port: 9696

    movies:
      serviceName: radarr
      service: media-radarr
      port: 7878

    movies-4k:
      serviceName: radarr-4k
      #service: media-radarr-4k
      service: media-radarr
      port: 7878

    ebooks:
      serviceName: readarr
      service: media-readarr
      port: 8787

    audiobooks:
      serviceName: readarr-audio
      #service: readarr-audio
      service: media-readarr
      port: 8787

    shows:
      serviceName: sonarr
      service: media-sonarr
      port: 8989
    shows-4k:
      serviceName: sonarr-4k
      #service: media-sonarr-4k
      service: media-sonarr
      port: 8989

    #unpack:
    #  serviceName: unpackerr
    #  service: media-unpackerr
    #  port: ????

    cluster:
      clusterBase: true
      service: base-argocd-server
      port: 80
    traefik:
      clusterBase: true
      namespace: kube-system
      service: traefik
      port: 80

jellyfin:
  global:
    nameOverride: jellyfin
  controllers:
    jellyfin:
      pod:
        securityContext:
          runAsUser: 1000
          # Using gid 2000 as "shared" group.
          runAsGroup: 2000
          fsGroup: 1000
          fsGroupChangePolicy: OnRootMismatch
          supplementalGroups:
            - 44 # video
            - 109 # render
            - 105
            - 568
            - 1000
            - 2000
      containers:
        app:
          image:
            repository: jellyfin/jellyfin
            tag: 10.10.7@sha256:7ae36aab93ef9b6aaff02b37f8bb23df84bb2d7a3f6054ec8fc466072a648ce2
          env:
            TZ: America/Denver
            JELLYFIN_DATA_DIR: /config/data
            JELLYFIN_CONFIG_DIR: /config
            #JELLYFIN_PublishedServerUrl: https://jellyfin.$.Values.domain
            #DOTNET_SYSTEM_IO_DISABLEFILELOCKING: "true"
            #JELLYFIN_FFmpeg__probesize: "50000000"
            #JELLYFIN_FFmpeg__analyzeduration: "50000000"
  service:
    app:
      controller: jellyfin
      type: ClusterIP
      ports:
        http:
          port: 8096
  persistence:
    config:
      existingClaim: jellyfin
    share:
      existingClaim: jellyfin-share
    media:
      existingClaim: media

jellyseerr:
  env:
    - name: TZ
      value: America/Denver

  # Additional volumes on the output Deployment definition.
  volumes:
    - name: jellyseerr-config
      persistentVolumeClaim:
        claimName: jellyseerr

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts:
    - name: jellyseerr-config
      mountPath: "/config"

lidarr:
  env:
    - name: TZ
      value: America/Denver

  # Additional volumes on the output Deployment definition.
  volumes:
    - name: lidarr-config
      persistentVolumeClaim:
        claimName: lidarr
    - name: media
      persistentVolumeClaim:
        claimName: media

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts:
    - name: lidarr-config
      mountPath: "/config"
    - name: media
      mountPath: /media/
      # subPath: 

prowlarr:
  env:
    - name: TZ
      value: America/Denver

  # Additional volumes on the output Deployment definition.
  volumes:
    - name: prowlarr-config
      persistentVolumeClaim:
        claimName: prowlarr
    - name: media
      persistentVolumeClaim:
        claimName: media

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts:
    - name: prowlarr-config
      mountPath: "/config"
    - name: media
      mountPath: /media/
      # subPath: 

radarr:
  env:
    - name: TZ
      value: America/Denver

  # Additional volumes on the output Deployment definition.
  volumes:
    - name: radarr-config
      persistentVolumeClaim:
        claimName: radarr
    - name: media
      persistentVolumeClaim:
        claimName: media

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts:
    - name: radarr-config
      mountPath: "/config"
    - name: media
      mountPath: /media/
      # subPath: 

readarr:
  env:
    - name: TZ
      value: America/Denver

  # Additional volumes on the output Deployment definition.
  volumes:
    - name: readarr-config
      persistentVolumeClaim:
        claimName: readarr
    - name: media
      persistentVolumeClaim:
        claimName: media

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts:
    - name: readarr-config
      mountPath: "/config"
    - name: media
      mountPath: /media/
      # subPath: 

sonarr:
  env:
    - name: TZ
      value: America/Denver

  # Additional volumes on the output Deployment definition.
  volumes:
    - name: sonarr-config
      persistentVolumeClaim:
        claimName: sonarr
    - name: media
      persistentVolumeClaim:
        claimName: media

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts:
    - name: sonarr-config
      mountPath: "/config"
    - name: media
      mountPath: /media/
      # subPath: 

unpackerr:
  env:
    - name: TZ
      value: America/Denver
  
  lidarr:
    enabled: true
  radarr: 
    enabled: true
  readarr: 
    enabled: true
  sonarr:
    enabled: true

  # Additional volumes on the output Deployment definition.
  volumes:
    - name: unpackerr-config
      persistentVolumeClaim:
        claimName: unpackerr
    - name: media
      persistentVolumeClaim:
        claimName: media

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts:
    - name: unpackerr-config
      mountPath: "/config"
    - name: media
      mountPath: /media/
      # subPath: 
  
audiobookshelf:
  global:
    nameOverride: "audiobookshelf"
  controllers:
    audiobookshelf:
      pod:
        securityContext:
          runAsUser: &uid 1000
          runAsGroup: &gid 2000
          fsGroup: 1000
          fsGroupChangePolicy: OnRootMismatch
          supplementalGroups:
            - 1000
            - 568
      containers:
        app:
          image:
            repository: ghcr.io/advplyr/audiobookshelf
            tag: 2.27.0
          #envFrom:
          #  - secretRef:
          #      name: audiobookshelf-secret
          env:
            TZ: America/Denver
            PORT: &port 8080
            AUDIOBOOKSHELF_UID: *uid
            AUDIOBOOKSHELF_GID: *gid
            CONFIG_PATH: /config
            METADATA_PATH: /config/metadata
          probes:
            liveness: &probes
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /healthcheck
                  port: *port
            readiness: *probes
          resources:
            requests:
              cpu: 50m
              memory: 200Mi
            limits:
              memory: 600Mi
  service:
    app:
      controller: audiobookshelf
      ports:
        http:
          port: *port
  persistence:
    config:
      existingClaim: audiobookshelf
    media:
      existingClaim: media
