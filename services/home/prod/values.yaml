mosquitto: 
  ingress:
    main:
      hosts:
        # Specify external host name
        - host: mqtt.spencerslab.com
          paths:
            - path: "/"
              pathType: Prefix
generic-device-plugin:
  app-template:
    configMaps:
      config:
        enabled: true
        data:
          devices.yaml: |-
            devices:
              - name: zigbee
                groups:
                  - paths:
                      - path: /dev/ttyUSB1
              - name: zwave
                groups:
                  - paths:
                      - path: /dev/ttyUSB0
              - name: snd
                groups:
                  - paths:
                      - path: /dev/snd
zigbee2mqtt:
  bitwardenIds:
    zigbee2mqtt: 0164cfbc-dd85-43af-a4cc-b13f00108bde
  app-template:
    controllers:
      zigbee2mqtt:
        containers:
          main:
            env:
              TZ: America/Denver
              #DEBUG: zigbee-herdsman*
              #ZIGBEE2MQTT_CONFIG_ADVANCED_LOG_LEVEL: debug
              ZIGBEE2MQTT_CONFIG_FRONTEND_URL: https://zigbee2mqtt.spencerslab.com
              ZIGBEE2MQTT_CONFIG_MQTT_SERVER: mqtt://home.spencerslab.com
              ZIGBEE2MQTT_CONFIG_MQTT_VERSION: 4
              ZIGBEE2MQTT_CONFIG_SERIAL_BAUDRATE: 57600
              ZIGBEE2MQTT_CONFIG_SERIAL_PORT: /dev/ttyUSB1
              ZIGBEE2MQTT_CONFIG_SERIAL_ADAPTER: ezsp
    ingress:
      zigbee2mqtt:
        annotations:
          hajimari.io/url: https://zigbee2mqtt.spencerslab.com
        hosts:
          - host: &host "zigbee2mqtt.spencerslab.com"
            paths: &paths
              - path: /
                service:
                  identifier: zigbee2mqtt
                  port: http
        tls:
          - hosts:
              - *host
            secretName: wildcard-cert
music-assistant:
  app-template:
    controllers:
      music-assistant:
        containers:
          main:
            resources:
              requests:
                cpu: 1000m
                memory: 512Mi
              limits:
                memory: 1024Mi
            image:
                tag: 2.1.0b1
            env:
              LOG_LEVEL: debug
              TZ: America/Denver
      srs:
        containers:
          main:
            image:
              repository: ossrs/srs
              tag: v5.0.210
            env:
              TZ: America/Denver

    pod: 
      hostNetwork: true
    service:
      music-assistant:
        primary: true
      snapcast:
        type: LoadBalancer
        controller: music-assistant
        externalTrafficPolicy: Local
        ports:
          stream:
            port: 1704
          control:
            port: 1705
    
      srs:
        controller: srs
        ports:
          http:
            port: 8080
          api:
            port: 1985
            protocol: TCP
      rtmp:
        controller: srs
        type: LoadBalancer
        externalTrafficPolicy: Local
        ports:
          http:
            port: 8080
          rtmp:
            enabled: true
            port: 1935
            protocol: TCP
            
    configMaps:
      srs-config:
        labels: {}
        annotations: {}
        data:
          docker.conf: |-
            listen              1935;
            max_connections     1000;
            http_api {
                enabled         on;
                listen          1985;
            }
            http_server {
                enabled         on;
                listen          8080;
            }
            vhost __defaultVhost__ {
                tcp_nodelay     on;
                min_latency     on;
                http_remux {
                  # whether enable the http live streaming service for vhost.
                  # Overwrite by env SRS_VHOST_HTTP_REMUX_ENABLED for all vhosts.
                  # default: off
                  enabled on;
                  # Whether stream has audio track, used as default value for stream metadata, for example, FLV header contains
                  # this flag. Sometimes you might want to force the metadata by disable guess_has_av.
                  # For HTTP-FLV, use this as default value for FLV header audio flag. See https://github.com/ossrs/srs/issues/939#issuecomment-1351385460
                  # For HTTP-TS, use this as default value for PMT table. See https://github.com/ossrs/srs/issues/939#issuecomment-1365086204
                  # Overwrite by env SRS_VHOST_HTTP_REMUX_HAS_AUDIO for all vhosts.
                  # Default: on
                  has_audio on;
                  # Whether stream has video track, used as default value for stream metadata, for example, FLV header contains
                  # this flag. Sometimes you might want to force the metadata by disable guess_has_av.
                  # For HTTP-FLV, use this as default value for FLV header video flag. See https://github.com/ossrs/srs/issues/939#issuecomment-1351385460
                  # For HTTP-TS, use this as default value for PMT table. See https://github.com/ossrs/srs/issues/939#issuecomment-1365086204
                  # Overwrite by env SRS_VHOST_HTTP_REMUX_HAS_VIDEO for all vhosts.
                  # Default: on
                  has_video off;
                  # the stream mount for rtmp to remux to live streaming.
                  # typical mount to [vhost]/[app]/[stream].flv
                  # the variables:
                  #       [vhost] current vhost for http live stream.
                  #       [app] current app for http live stream.
                  #       [stream] current stream for http live stream.
                  # @remark the [vhost] is optional, used to mount at specified vhost.
                  # the extension:
                  #       .flv mount http live flv stream, use default gop cache.
                  #       .ts mount http live ts stream, use default gop cache.
                  #       .mp3 mount http live mp3 stream, ignore video and audio mp3 codec required.
                  #       .aac mount http live aac stream, ignore video and audio aac codec required.
                  # for example:
                  #       mount to [vhost]/[app]/[stream].flv
                  #           access by http://ossrs.net:8080/live/livestream.flv
                  #       mount to /[app]/[stream].flv
                  #           access by http://ossrs.net:8080/live/livestream.flv
                  #           or by http://192.168.1.173:8080/live/livestream.flv
                  #       mount to [vhost]/[app]/[stream].mp3
                  #           access by http://ossrs.net:8080/live/livestream.mp3
                  #       mount to [vhost]/[app]/[stream].aac
                  #           access by http://ossrs.net:8080/live/livestream.aac
                  #       mount to [vhost]/[app]/[stream].ts
                  #           access by http://ossrs.net:8080/live/livestream.ts
                  # @remark the port of http is specified by http_server section.
                  # Overwrite by env SRS_VHOST_HTTP_REMUX_MOUNT for all vhosts.
                  # default: [vhost]/[app]/[stream].flv
                  mount [vhost]/[app]/[stream].flv;
                }

                play {
                    gop_cache       off;
                    queue_length    10;
                    mw_latency      100;
                }

                publish {
                    mr off;
                }
            }

    persistence:
      tmp:
        enabled: true
        type: emptyDir
      config:
        existingClaim: owncast-config
        globalMounts:
          - path: /app/data
      srs-config:
        type: configMap
        name: "{{ .Release.Name }}-music-assistant-srs-config"
        globalMounts:
          - path: /usr/local/srs/conf
    #controllers:
    #  music-assistant:
    #    containers:
    #      main: 
    #        env: 
    #          LOG_LEVEL: debug

    ingress:
      music-assistant:
        annotations:
          hajimari.io/url: https://music-assistant.spencerslab.com
        hosts:
          - host: &host "music-assistant.spencerslab.com"
            paths: &paths
              - path: /
                service:
                  identifier: music-assistant
                  port: http
        tls:
          - hosts:
              - *host
            secretName: wildcard-cert
      srs:
        hosts:
          - host: &host "stream.spencerslab.com"
            paths:
              - path: /
                service:
                  identifier: srs
                  port: http
              - path: /api/
                service:
                  identifier: srs
                  port: api
        tls:
          - hosts:
              - *host

espresense:
  bitwardenIds:
    espresense: 1130d75e-e16c-428b-bf99-b15b0010e993
  app-template:
    ingress:
      espresense:
        annotations:
          hajimari.io/url: https://espresense.spencerslab.com
        hosts:
          - host: &host "espresense.spencerslab.com"
            paths: &paths
              - path: /
                service:
                  identifier: espresense
                  port: http
        tls:
          - hosts:
              - *host
            secretName: wildcard-cert

ledfx:
  app-template:
    controllers:
      ledfx:
        containers:
          main:
            env:
              SQUEEZE: 1
    ingress:
      ledfx:
        annotations:
          hajimari.io/url: https://ledfx.spencerslab.com
        hosts:
          - host: &host "ledfx.spencerslab.com"
            paths: &paths
              - path: /
                service:
                  identifier: ledfx
                  port: http
        tls:
          - hosts:
              - *host
            secretName: wildcard-cert
    persistence:
      config:
        existingClaim: ledfx
        advancedMounts:
          ledfx:
            main:
              - path: /app/ledfx-config/


hyperion:
  app-template:
    controllers:
      hyperion:
        containers:
          main:
            env:
              TZ: America/Denver
              PUID: 911
              PGID: 1000
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop: 
                  - ALL
        pod:
          securityContext:
            #runAsNonRoot: false
            #runAsUser: 911
            fsGroup: 911
            fsGroupChangePolicy: OnRootMismatch

    ingress:
      hyperion:
        annotations:
          hajimari.io/url: https://hyperhdr.spencerslab.com
        hosts:
          - host: &host "hyperhdr.spencerslab.com"
            paths:
              - path: /
                service:
                  identifier: hyperion
logitech-media-server:
  app-template:
    controllers:
      logitech-media-server:
        containers:
          main:
            image:
              repository: toertel/logitech-media-server
              tag: v8.4.0-1@sha256:07dde462237c0618034c9d2db33967f5bc0db34544558e8edaac32ef0614555a
            env:
              TZ: America/Denver
              EXTRA_ARGS: "--advertiseaddr=lms.spencerslab.com"
            resources:
              requests:
                memory: 256Mi
              limits:
                memory: 4096Mi
        #    securityContext:
        #      allowPrivilegeEscalation: false
        #      readOnlyRootFilesystem: true
        #      capabilities:
        #        drop:
        #          - ALL
        #pod:
        #  securityContext:
        #    runAsUser: 1000
        #    runAsGroup: 1000
        #    runAsNonRoot: true
        #    fsGroup: 1000
    service:
      lms:
        type: LoadBalancer
        controller: logitech-media-server
        externalTrafficPolicy: Local
        ports:
          server:
            port: 9000
          cli:
            port: 9090
          slimproto-tcp:
            port: 3483
            protocol: TCP
          slimproto-udp:
            port: 3483
            protocol: UDP
    ingress:
      espresense:
        annotations:
          hajimari.io/url: https://lms.spencerslab.com
        hosts:
          - host: &host "lms.spencerslab.com"
            paths: &paths
              - path: /
                service:
                  identifier: logitech-media-server
                  port: http
        tls:
          - hosts:
              - *host
            secretName: wildcard-cert
    configMaps:
      init:
        data: 
          custom-init.sh: |-
            !#/bin/bash
            echo "it ran at least" > /tmp/cool.txt

    persistence:
      playlists:
        existingClaim: lms-playlists
      config:
        existingClaim: lms-config
      music:
        existingClaim: lms-music
      init-config-map:
        type: configMap
        name: '{{ .Release.Name }}-logitech-media-server-init'
        globalMounts:
          - path: /config/custom-init.sh
            subPath: custom-init.sh
