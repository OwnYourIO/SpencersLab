keycloakx:
    command:
      - "/opt/keycloak/bin/kc.sh"
      - "--verbose"
      - "start-dev"

    extraEnv: |-
      - name: TZ
        value: "America/Denver"
      - name: JAVA_OPTS_APPEND
        value: "-Djgroups.dns.query=keycloak-headless"
      - name: KC_PROXY
        value: edge
      - name: KC_HTTP_ENABLED
        value: "true"
      - name: KC_HTTP_PORT
        value: "8080"
      - name: KC_HOSTNAME
        value: login.spencerslab.com
      - name: KC_HOSTNAME_STRICT
        value: "true"
      - name: KC_HOSTNAME_STRICT_HTTPS
        value: "true"
      - name: KC_LOG_LEVEL
        value: "org.keycloak.events:DEBUG,org.infinispan:INFO,org.jgroups:INFO"
      - name: KEYCLOAK_ADMIN
        value: "Admin"
      - name: KEYCLOAK_ADMIN_PASSWORD
        value: "Test123456"
    ingress:
      enabled: true
      rules:
        - host: "login.spencerslab.com"
          paths:
            - path: "/"
              pathType: Prefix
      tls:
        - hosts:
            - "login.spencerslab.com"
          secretName: wildcard-cert

seaweedfs:
  global:
    createClusterRole: true
    monitoring:
      enabled: false

  master:
    enabled: true
#    defaultReplication: "000"
    # You may use ANY storage-class, example with local-path-provisioner
    # Annotations are optional.
    #  data:
    #    type: "persistentVolumeClaim"
    #    size: "24Ti"
    #    storageClass: "local-path-provisioner"
    #    annotations:
    #      "key": "value"
    #
    # You may also spacify an existing claim:
    #  data:
    #    type: "existingClaim"
    #    claimName: "my-pvc"
    #
    # You can also use emptyDir storage:
    #  data:
    #    type: "emptyDir"
    data:
      type: "persistentVolumeClaim"
      size: 10Gi
    logs:
      type: "existingClaim"
      claimName: "data-default-seaweedfs-master-0"

    # Resource requests, limits, etc. for the master cluster placement. This
    # should map directly to the value of the resources field for a PodSpec,
    # formatted as a multi-line string. By default no direct resource request
    # is made.
    resources: {}

    # Affinity Settings
    # Commenting out or setting as empty the affinity variable, will allow
    # deployment to single node services such as Minikube
    affinity: {}
      #|
      #podAntiAffinity:
      #  requiredDuringSchedulingIgnoredDuringExecution:
      #    - labelSelector:
      #        matchLabels:
      #          app.kubernetes.io/name: {{ template "seaweedfs.name" . }}
      #          app.kubernetes.io/instance: {{ .Release.Name }}
      #          app.kubernetes.io/component: master
      #      topologyKey: kubernetes.io/hostname

    # Configure security context for Pod
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    # Example:
    # podSecurityContext:
    #   enabled: true
    #   runAsUser: 1000
    #   runAsGroup: 3000
    #   fsGroup: 2000
    podSecurityContext: {}

    # Configure security context for Container
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    # Example:
    # containerSecurityContext:
    #   enabled: true
    #   runAsUser: 2000
    #   allowPrivilegeEscalation: false
    containerSecurityContext: {}

    ingress:
      enabled: false
      className: "traefik"
      host: "seaweedfs-master.infra.spencerslab.com"
      annotations: {}
      tls:
        - hosts:
            - "seaweedfs-master.infra.spencerslab.com"
          secretName: cluster-wildcard-cert
          rules:
          - host: "seaweedfs-master.infra.spencerslab.com"
            http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: seaweedfs-master
                      port:
                        number: 9333

  volume:
    index: leveldb
    # For each data disk you may use ANY storage-class, example with local-path-provisioner
    # Annotations are optional.
    #  dataDirs:
    #   - name: data:
    #     type: "persistentVolumeClaim"
    #     size: "24Ti"
    #     storageClass: "local-path-provisioner"
    #     annotations:
    #      "key": "value"
    #     maxVolumes: 0  # If set to zero on non-windows OS, the limit will be auto configured. (default "7")
    #
    # You may also spacify an existing claim:
    #   - name: data
    #     type: "existingClaim"
    #     claimName: "my-pvc"
    #     maxVolumes: 0  # If set to zero on non-windows OS, the limit will be auto configured. (default "7")
    #
    # You can also use emptyDir storage:
    #   - name: data
    #     type: "emptyDir"
    #     maxVolumes: 0  # If set to zero on non-windows OS, the limit will be auto configured. (default "7")
    dataDirs:
      - name: hdd1
        type: "hostPath"
        hostPathPrefix: /mnt/drive1
        maxVolumes: 0
      - name: hdd2
        type: "hostPath"
        hostPathPrefix: /mnt/drive2
        maxVolumes: 0
      - name: hdd3
        type: "hostPath"
        hostPathPrefix: /mnt/drive3
        maxVolumes: 0
      - name: hdd4
        type: "hostPath"
        hostPathPrefix: /mnt/drive4
        maxVolumes: 0
      - name: hdd5
        type: "hostPath"
        hostPathPrefix: /mnt/drive5
        maxVolumes: 0
    # idx can be defined by:
    #
    # idx:
    #  type: "hostPath"
    #  hostPathPrefix: /ssd
    #
    # or
    #
    # idx:
    #  type: "persistentVolumeClaim"
    #  size: "20Gi"
    #  storageClass: "local-path-provisioner"
    #
    # or
    #
    # idx:
    #   type: "existingClaim"
    #   claimName: "myClaim"
    #
    # or
    #
    # idx:
    #  type: "emptyDir"

    # same applies to "logs"

    idx:
      type: "persistentVolumeClaim"
      size: "10Gi"
    ingress:
      enabled: false
      className: "traefix"
      host: "seaweedfs-volume.infra.spencerslab.com"
      annotations: {}
      tls:
        - hosts:
            - "seaweedfs-volume.infra.spencerslab.com"
          secretName: cluster-wildcard-cert
          rules:
          - host: "seaweedfs-volume.infra.spencerslab.com"
            http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: seaweedfs-volume
                      port:
                        number: 8080

    # Volume server's rack name
    rack: infra.spencerslab.com

    # Volume server's data center name
    dataCenter: spencerslab.com
    # Affinity Settings
    # Commenting out or setting as empty the affinity variable, will allow
    # deployment to single node services such as Minikube
    affinity: {} #|
      #podAntiAffinity:
      #  requiredDuringSchedulingIgnoredDuringExecution:
      #    - labelSelector:
      #        matchLabels:
      #          app.kubernetes.io/name: {{ template "seaweedfs.name" . }}
      #          app.kubernetes.io/instance: {{ .Release.Name }}
      #          app.kubernetes.io/component: volume
      #      topologyKey: kubernetes.io/hostname

    # Resource requests, limits, etc. for the server cluster placement. This
    # should map directly to the value of the resources field for a PodSpec,
    # formatted as a multi-line string. By default no direct resource request
    # is made.
    resources: {}

    # Configure security context for Pod
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    # Example:
    # podSecurityContext:
    #   enabled: true
    #   runAsUser: 1000
    #   runAsGroup: 3000
    #   fsGroup: 2000
    podSecurityContext: {}

    # Configure security context for Container
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    # Example:
    # containerSecurityContext:
    #   enabled: true
    #   runAsUser: 2000
    #   allowPrivilegeEscalation: false
    containerSecurityContext: {}
    
  filer:
    enabled: true

    #  replication type is XYZ:
    # X number of replica in other data centers
    # Y number of replica in other racks in the same data center
    # Z number of replica in other servers in the same rack
    defaultReplicaPlacement: "000"

    # encrypt data on volume servers
    encryptVolumeData: false

    # Disable http request, only gRpc operations are allowed
    disableHttp: false

    
    # You may use ANY storage-class, example with local-path-provisioner
    # Annotations are optional.
    #  data:
    #    type: "persistentVolumeClaim"
    #    size: "24Ti"
    #    storageClass: "local-path-provisioner"
    #    annotations:
    #      "key": "value"
    #
    # You may also specify an existing claim:
    #  data:
    #    type: "existingClaim"
    #    claimName: "my-pvc"
    #
    # You can also use emptyDir storage:
    #  data:
    #    type: "emptyDir"
    data:
      type: "persistentVolumeClaim"
      size: "10Gi"
    logs:
      type: "existingClaim"
      claimName: "data-filer-seaweedfs-filer-0"

    # Affinity Settings
    # Commenting out or setting as empty the affinity variable, will allow
    # deployment to single node services such as Minikube
    affinity: {} #|
      #podAntiAffinity:
      #  requiredDuringSchedulingIgnoredDuringExecution:
      #    - labelSelector:
      #        matchLabels:
      #          app.kubernetes.io/name: {{ template "seaweedfs.name" . }}
      #          app.kubernetes.io/instance: {{ .Release.Name }}
      #          app.kubernetes.io/component: filer
      #      topologyKey: kubernetes.io/hostname

    # Resource requests, limits, etc. for the server cluster placement. This
    # should map directly to the value of the resources field for a PodSpec,
    # formatted as a multi-line string. By default no direct resource request
    # is made.
    resources: {}

    # nodeSelector labels for server pod assignment, formatted as a muli-line string.
    # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    # Example:
    #nodeSelector: |
    #  kubernetes.io/arch: amd64
    # nodeSelector: |
    #   sw-backend: "true"

    # Configure security context for Pod
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    # Example:
    # podSecurityContext:
    #   enabled: true
    #   runAsUser: 1000
    #   runAsGroup: 3000
    #   fsGroup: 2000
    podSecurityContext: {}

    # Configure security context for Container
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    # Example:
    # containerSecurityContext:
    #   enabled: true
    #   runAsUser: 2000
    #   allowPrivilegeEscalation: false
    containerSecurityContext: {}

    ingress:
      enabled: false
      className: "traefik"
      host: "seaweedfs-filer.infra.spencerslab.com"
      annotations: {}
      tls:
        - hosts:
            - "seaweedfs-filer.infra.spencerslab.com"
          secretName: cluster-wildcard-cert
          rules:
          - host: "seaweedfs-filer.infra.spencerslab.com"
            http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: seaweedfs-filer
                      port:
                        number: 8888

    # extraEnvVars is a list of extra enviroment variables to set with the stateful set.
    extraEnvironmentVars:
      WEED_LEVELDB2_ENABLED: "true"
      # with http DELETE, by default the filer would check whether a folder is empty.
      # recursive_delete will delete all sub folders and files, similar to "rm -Rf"
      WEED_FILER_OPTIONS_RECURSIVE_DELETE: "true"
      # directories under this folder will be automatically creating a separate bucket
      WEED_FILER_BUCKETS_FOLDER: "/buckets"

    # secret env variables
    secretExtraEnvironmentVars: {}
        # WEED_POSTGRES_USERNAME:
        #   secretKeyRef:
        #     name: postgres-credentials
        #     key: username
        # WEED_POSTGRES_PASSWORD:
        #   secretKeyRef:
        #     name: postgres-credentials
        #     key: password
#    s3:
#      enabled: true
#      port: 8333
#      httpsPort: 0
#      allowEmptyFolder: true
#      domainName: '{{ .seaweedfs_s3_hostname }}'
#      enableAuth: true
#
#      # set to the name of an existing kubernetes Secret with the s3 json config file
#      # should have a secret key called seaweedfs_s3_config with an inline json configure
#      existingConfigSecret: seaweedfs-s3-secret
#      # You may specify buckets to be created during the install process.
#      # Buckets may be exposed publicly by setting `anonymousRead` to `true`
#      createBuckets:
#        - name: data_test
#          anonymousRead: false
#
#  s3:
#    enabled: true
#    allowEmptyFolder: true
#    # enable user & permission to s3 (need to inject to all services)
#    enableAuth: true
#    # Suffix of the host name, {bucket}.{domainName}
#    domainName: "s3.spencerslab.com"
#    ingress:
#      enabled: true
#    #replicas: 1
#    #port: 8333
#    # add additional https port
#    #httpsPort: 0
#    #metricsPort: 9327
#
#    # Resource requests, limits, etc. for the server cluster placement. This
#    # should map directly to the value of the resources field for a PodSpec,
#    # formatted as a multi-line string. By default no direct resource request
#    # is made.
#    resources: {}
#
#    # nodeSelector labels for server pod assignment, formatted as a muli-line string.
#    # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
#    # Example:
#    #nodeSelector: |
#    #  kubernetes.io/arch: amd64
#    # nodeSelector: |
#    #   sw-backend: "true"
#
#    # used to assign priority to server pods
#    # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
#    #priorityClassName: ""
#
#    # used to assign a service account.
#    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
#    #serviceAccountName: ""
#
#    # Configure security context for Pod
#    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
#    # Example:
#    # podSecurityContext:
#    #   enabled: true
#    #   runAsUser: 1000
#    #   runAsGroup: 3000
#    #   fsGroup: 2000
#    podSecurityContext: {}
#
#    # Configure security context for Container
#    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
#    # Example:
#    # containerSecurityContext:
#    #   enabled: true
#    #   runAsUser: 2000
#    #   allowPrivilegeEscalation: false
#    containerSecurityContext: {}
#
#    # You can also use emptyDir storage:
#    #  logs:
#    #    type: "emptyDir"
#    logs:
#      type: "existingClaim"
#      claimName: "data-s3-seaweedfs-s3-0"
