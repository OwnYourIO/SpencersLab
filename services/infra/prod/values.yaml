
bitwardenIds:
  keycloak: f7b628ec-2544-4c28-a476-b1a501487d99
  argocd-sso-secret: 6bc8ead2-faf6-4548-9831-b1a501646625
  smtp: 876515bc-b0d6-43df-b9fa-b0dd000a601e

global:
  server: infra-openldap.default

389ds:
  bitwardenIds:
    389ds: f7b628ec-2544-4c28-a476-b1a501487d99
  

keycloakx:
    image:  
      tag: 25.0.2

    command:
      - "/opt/keycloak/bin/kc.sh"
      - "--verbose"
      - "start-dev"
    
    http:
      relativePath: /
      internalPort: metrics

    extraEnv: |-
      - name: TZ
        value: "America/Denver"
      - name: JAVA_OPTS_APPEND
        value: >-
          -Djgroups.dns.query=keycloak-headless
      - name: KC_PROXY
        value: passthrough
      - name: KC_HTTP_PORT
        value: "8080"
      - name: KC_HOSTNAME
        value: https://login.spencerslab.com/
      - name: KC_HOSTNAME_STRICT
        value: "true"
      - name: KC_HOSTNAME_STRICT_HTTPS
        value: "true"
      - name: KC_LOG_LEVEL
        value: "org.keycloak.events:DEBUG,org.infinispan:INFO,org.jgroups:INFO"
      - name: KEYCLOAK_ADMIN
        valueFrom:
          secretKeyRef:
            name: keycloak-secret
            key: KEYCLOAK_ADMIN
      - name: KEYCLOAK_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            name: keycloak-secret
            key: KEYCLOAK_ADMIN_PASSWORD
      # - name: KC_DB_USERNAME
      #   value: "${POSTGRES_SSO_USERNAME}"
      # - name: KC_DB_PASSWORD
      #   value: "${POSTGRES_SSO_PASSWORD}"
      # - name: KC_DB
      #   value: postgres
      # - name: KC_DB_URL_HOST
      #   value: "postgresql.sso.svc.cluster.local"
      # - name: KC_DB_URL_PORT
      #   value: "5432"
      # - name: KC_DB_URL_DATABASE
      #   value: sso
      
      # TODO: Have a feeling I'll want a custom redirect like this eventually.
      # These were taken from the quarks secret, which had a note we could use env instead. 
      # quarkus.http.non-application-root-path=/
      # # custom redirects
      # quarkus.kc-routing.path-redirect./=/realms/YOUR-REALM-NAME/account
      # quarkus.kc-routing.path-redirect./auth=/realms/YOUR-REALM-NAME/account
      # quarkus.kc-routing.path-redirect./register=/realms/YOUR-REALM-NAME/protocol/openid-connect/registrations?client_id=account&response_type=code
      # quarkus.kc-routing.path-prefix./oauth/authorize=/realms/YOUR-REALM-NAME/protocol/openid-connect/auth
      # quarkus.kc-routing.path-filter./api/v4/user=/realms/YOUR-REALM-NAME/protocol/openid-connect/userinfo
      # quarkus.kc-routing.path-filter./oauth/token=/realms/YOUR-REALM-NAME/protocol/openid-connect/token
      # # block metrics and health enpoints from being exposed through the istio ingress
      # quarkus.kc-routing.path-recursive-block./metrics=8443
      # quarkus.kc-routing.path-recursive-block./health=8443

    extraVolumes: |-
      - name: keycloak-data
        persistentVolumeClaim:
          claimName: keycloak
      - name: keycloak-providers
        persistentVolumeClaim:
          claimName: keycloak-providers
    # - name: customreg
    #   secret:
    #     secretName: {{ include "keycloak.fullname" . }}-customreg
    # - name: realm
    #   secret:
    #     secretName: {{ include "keycloak.fullname" . }}-realm
    # - name: plugin
    #   emptyDir: {}
    # - name: truststore
    #   secret:
    #     secretName: {{ include "keycloak.fullname" . }}-truststore
    # - name: custom-theme
    #   emptyDir: {}
    extraVolumeMounts: |-
      - name: keycloak-data
        mountPath: /opt/keycloak/data/
      - name: keycloak-providers
        mountPath: /opt/keycloak/providers/

    metrics:
      enabled: true

    service:
      extraPorts:
        - name: metrics
          port: 9000

    serviceMonitor:
      enabled: true
      port: metrics

    extraServiceMonitor:
      enabled: true  
      port: http
      path: /realms/SpencersLab/metrics

    ingress:
      enabled: true
      rules:
        - host: "login.spencerslab.com"
          paths:
            - path: "/"
              pathType: Prefix
      tls:
        - hosts:
            - "login.spencerslab.com"
          secretName: wildcard-cert

    # TODO: Add DB.
    #database:
    #  vendor: "postgres"
    #  hostname: "apps.postgresql.${INTERNAL_DOMAIN}"
    #  port: "5432"
    #  database: "keycloak"
    #  user: "keycloak"
    #  existingSecret: "keycloak-db"
    #dbchecker:
    #  enabled: true

seaweedfs-csi-driver:
  #seaweedfsFiler: "seaweedfs-filer.{{ $.Values.clusterName }}.{{ $.Values.domain }}"
  seaweedfsFiler: "seaweedfs-filer-0.seaweedfs-filer.default:8888"

seaweedfs:
  global:
    createClusterRole: true
    monitoring:
      enabled: true
    # if enabled will use global.replicationPlacment and override master & filer defaultReplicaPlacement config
    #enableReplication: false
    #  replication type is XYZ:
    # X number of replica in other data centers
    # Y number of replica in other racks in the same data center
    # Z number of replica in other servers in the same rack
    #replicationPlacment: "001"

  master:
    enabled: true
    #port: 9333
    #grpcPort: 19333
    metricsPort: 9327
#    defaultReplication: "000"

    #config: |-
    #  # Enter any extra configuration for master.toml here.
    #  # It may be be a multi-line string.

    # You may use ANY storage-class, example with local-path-provisioner
    # Annotations are optional.
    #  data:
    #    type: "persistentVolumeClaim"
    #    size: "24Ti"
    #    storageClass: "local-path-provisioner"
    #    annotations:
    #      "key": "value"
    #
    # You may also spacify an existing claim:
    #  data:
    #    type: "existingClaim"
    #    claimName: "my-pvc"
    #
    # You can also use emptyDir storage:
    #  data:
    #    type: "emptyDir"
    data:
      type: "persistentVolumeClaim"
      size: 10Gi
    logs:
      type: "existingClaim"
      claimName: "data-default-seaweedfs-master-0"

    # Resource requests, limits, etc. for the master cluster placement. This
    # should map directly to the value of the resources field for a PodSpec,
    # formatted as a multi-line string. By default no direct resource request
    # is made.
    resources: {}

    # Affinity Settings
    # Commenting out or setting as empty the affinity variable, will allow
    # deployment to single node services such as Minikube
    affinity: {}
      #|
      #podAntiAffinity:
      #  requiredDuringSchedulingIgnoredDuringExecution:
      #    - labelSelector:
      #        matchLabels:
      #          app.kubernetes.io/name: {{ template "seaweedfs.name" . }}
      #          app.kubernetes.io/instance: {{ .Release.Name }}
      #          app.kubernetes.io/component: master
      #      topologyKey: kubernetes.io/hostname

    # Configure security context for Pod
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    # Example:
    # podSecurityContext:
    #   enabled: true
    #   runAsUser: 1000
    #   runAsGroup: 3000
    #   fsGroup: 2000
    podSecurityContext: {}

    # Configure security context for Container
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    # Example:
    # containerSecurityContext:
    #   enabled: true
    #   runAsUser: 2000
    #   allowPrivilegeEscalation: false
    containerSecurityContext: {}


    ingress:
      # Disabled and done with template instead because this chart assumes nginx :/
      enabled: false

  volume:
    #enabled: true
    #port: 8080
    #grpcPort: 18080
    metricsPort: 9328
    index: leveldb
    # TODO: Pretty sure this should be more but it complains about duplicate mounts. 
    replicas: 1
    #minFreeSpacePercent: 5
    #compactionMBps: "250"

    # For each data disk you may use ANY storage-class, example with local-path-provisioner
    # Annotations are optional.
    #  dataDirs:
    #   - name: data:
    #     type: "persistentVolumeClaim"
    #     size: "24Ti"
    #     storageClass: "local-path-provisioner"
    #     annotations:
    #      "key": "value"
    #     maxVolumes: 0  # If set to zero on non-windows OS, the limit will be auto configured. (default "7")
    #
    # You may also spacify an existing claim:
    #   - name: data
    #     type: "existingClaim"
    #     claimName: "my-pvc"
    #     maxVolumes: 0  # If set to zero on non-windows OS, the limit will be auto configured. (default "7")
    #
    # You can also use emptyDir storage:
    #   - name: data
    #     type: "emptyDir"
    #     maxVolumes: 0  # If set to zero on non-windows OS, the limit will be auto configured. (default "7")
    dataDirs:
      - name: hdd1
        type: "hostPath"
        hostPathPrefix: /var/mnt/drive1
        maxVolumes: 0
      - name: hdd2
        type: "hostPath"
        hostPathPrefix: /var/mnt/drive2
        maxVolumes: 0
      - name: hdd3
        type: "hostPath"
        hostPathPrefix: /var/mnt/drive3
        maxVolumes: 0
      - name: hdd4
        type: "hostPath"
        hostPathPrefix: /var/mnt/drive4
        maxVolumes: 0
      - name: hdd5
        type: "hostPath"
        hostPathPrefix: /var/mnt/drive5
        maxVolumes: 0
    # idx can be defined by:
    #
    # idx:
    #  type: "hostPath"
    #  hostPathPrefix: /ssd
    #
    # or
    #
    # idx:
    #  type: "persistentVolumeClaim"
    #  size: "20Gi"
    #  storageClass: "local-path-provisioner"
    #
    # or
    #
    # idx:
    #   type: "existingClaim"
    #   claimName: "myClaim"
    #
    # or
    #
    # idx:
    #  type: "emptyDir"

    # same applies to "logs"

    idx:
      type: "persistentVolumeClaim"
      size: "10Gi"

    logs: 
      type: "persistentVolumeClaim"
      size: "10Gi"

    ingress:
      enabled: false

    # Volume server's rack name
    rack: infra.spencerslab.com

    # Volume server's data center name
    dataCenter: spencerslab.com

    # extraEnvVars is a list of extra enviroment variables to set with the stateful set.
    extraEnvironmentVars:
      PUBLICURL: "seaweedfs-volume.infra.spencerslab.com:8080"
      PUBLIC_URL: "seaweedfs-volume.infra.spencerslab.com:8080"
      WEED_PUBLICURL: "seaweedfs-volume.infra.spencerslab.com:8080"
      WEED_PUBLIC_URL: "seaweedfs-volume.infra.spencerslab.com:8080"

    # Redirect moved or non-local volumes. (default proxy)
    #readMode: proxy

    # Affinity Settings
    # Commenting out or setting as empty the affinity variable, will allow
    # deployment to single node services such as Minikube
    affinity: {} #|
      #podAntiAffinity:
      #  requiredDuringSchedulingIgnoredDuringExecution:
      #    - labelSelector:
      #        matchLabels:
      #          app.kubernetes.io/name: {{ template "seaweedfs.name" . }}
      #          app.kubernetes.io/instance: {{ .Release.Name }}
      #          app.kubernetes.io/component: volume
      #      topologyKey: kubernetes.io/hostname

    # Resource requests, limits, etc. for the server cluster placement. This
    # should map directly to the value of the resources field for a PodSpec,
    # formatted as a multi-line string. By default no direct resource request
    # is made.
    resources: {}

    # Configure security context for Pod
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    # Example:
    podSecurityContext:
      enabled: true
      runAsUser: 2000
      runAsGroup: 2000
      fsGroup: 2000

    # Configure security context for Container
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    # Example:
    # containerSecurityContext:
    #   enabled: true
    #   runAsUser: 2000
    #   allowPrivilegeEscalation: false
    containerSecurityContext: {}
    
  filer:
    enabled: true
    replicas: 5
    #port: 8888
    #grpcPort: 18888
    metricsPort: 9327
    #encryptVolumeData: false

    #  replication type is XYZ:
    # X number of replica in other data centers
    # Y number of replica in other racks in the same data center
    # Z number of replica in other servers in the same rack
    defaultReplicaPlacement: "000"

    # encrypt data on volume servers
    encryptVolumeData: false

    # Disable http request, only gRpc operations are allowed
    # TODO: This has to be disabled because the health check is hard coded for HTTP.
    disableHttp: false

    # used to configure livenessProbe on filer containers
    livenessProbe:
      enabled: false
      grpc:
        port: 18888

    # used to configure readinessProbe on filer containers
    readinessProbe:
      enabled: false
      grpc:
        port: 18888

    # You may use ANY storage-class, example with local-path-provisioner
    # Annotations are optional.
    #  data:
    #    type: "persistentVolumeClaim"
    #    size: "24Ti"
    #    storageClass: "local-path-provisioner"
    #    annotations:
    #      "key": "value"
    #
    # You may also specify an existing claim:
    #  data:
    #    type: "existingClaim"
    #    claimName: "my-pvc"
    #
    # You can also use emptyDir storage:
    #  data:
    #    type: "emptyDir"
    # or hostpath?: 
      #type: "hostPath"
      #hostPathPrefix: /storage
    data:
      type: "persistentVolumeClaim"
      size: "10Gi"
    logs:
      type: "existingClaim"
      claimName: "data-filer-seaweedfs-filer-0"

    # Affinity Settings
    # Commenting out or setting as empty the affinity variable, will allow
    # deployment to single node services such as Minikube
    affinity: {} #|
      #podAntiAffinity:
      #  requiredDuringSchedulingIgnoredDuringExecution:
      #    - labelSelector:
      #        matchLabels:
      #          app.kubernetes.io/name: {{ template "seaweedfs.name" . }}
      #          app.kubernetes.io/instance: {{ .Release.Name }}
      #          app.kubernetes.io/component: filer
      #      topologyKey: kubernetes.io/hostname

    # Resource requests, limits, etc. for the server cluster placement. This
    # should map directly to the value of the resources field for a PodSpec,
    # formatted as a multi-line string. By default no direct resource request
    # is made.
    resources: {}

    # nodeSelector labels for server pod assignment, formatted as a muli-line string.
    # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    # Example:
    #nodeSelector: |
    #  kubernetes.io/arch: amd64
    # nodeSelector: |
    #   sw-backend: "true"

    # Configure security context for Pod
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    # Example:
    # podSecurityContext:
    #   enabled: true
    #   runAsUser: 1000
    #   runAsGroup: 3000
    #   fsGroup: 2000
    podSecurityContext: {}

    # Configure security context for Container
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    # Example:
    # containerSecurityContext:
    #   enabled: true
    #   runAsUser: 2000
    #   allowPrivilegeEscalation: false
    containerSecurityContext: {}

    ingress:
      enabled: false

    # extraEnvVars is a list of extra enviroment variables to set with the stateful set.
    extraEnvironmentVars:
      WEED_LEVELDB2_ENABLED: "true"
      # with http DELETE, by default the filer would check whether a folder is empty.
      # recursive_delete will delete all sub folders and files, similar to "rm -Rf"
      WEED_FILER_OPTIONS_RECURSIVE_DELETE: "true"
      # directories under this folder will be automatically creating a separate bucket
      WEED_FILER_BUCKETS_FOLDER: "/buckets"

    # secret env variables
    secretExtraEnvironmentVars: {}
        # WEED_POSTGRES_USERNAME:
        #   secretKeyRef:
        #     name: postgres-credentials
        #     key: username
        # WEED_POSTGRES_PASSWORD:
        #   secretKeyRef:
        #     name: postgres-credentials
        #     key: password
  s3:
    enabled: true
    allowEmptyFolder: true
    # Suffix of the host name, {bucket}.{domainName}
    domainName: "s3.spencerslab.com"
    ingress:
      enabled: false
    metricsPort: 9327

    # Resource requests, limits, etc. for the server cluster placement. This
    # should map directly to the value of the resources field for a PodSpec,
    # formatted as a multi-line string. By default no direct resource request
    # is made.
    resources: {}

    # nodeSelector labels for server pod assignment, formatted as a muli-line string.
    # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    # Example:
    #nodeSelector: |
    #  kubernetes.io/arch: amd64
    # nodeSelector: |
    #   sw-backend: "true"

    # used to assign priority to server pods
    # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
    #priorityClassName: ""

    # used to assign a service account.
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
    #serviceAccountName: ""

    # Configure security context for Pod
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    # Example:
    # podSecurityContext:
    #   enabled: true
    #   runAsUser: 1000
    #   runAsGroup: 3000
    #   fsGroup: 2000
    podSecurityContext: {}

    # Configure security context for Container
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    # Example:
    # containerSecurityContext:
    #   enabled: true
    #   runAsUser: 2000
    #   allowPrivilegeEscalation: false
    containerSecurityContext: {}

    # You can also use emptyDir storage:
    #  logs:
    #    type: "emptyDir"
    logs:
      type: "existingClaim"
      claimName: "data-s3-seaweedfs-s3-0"

samba:
  app-template:
    controllers:
      samba:
        containers:
          main:
            env:
              TZ: America/Denver
              SAMBA_HOSTS_ALLOW: "127.0.0.0/8 10.0.0.0/16"
              SAMBA_SERVER_STRING: &serverstring "storage.spencerslab.com"
              #WSDD2_ENABLE: "1"
              #WSDD2_HOSTNAME: "storage"
              #WSDD2_NETBIOS_NAME: "storage"

    configMaps:
      samba-config:
        data: 
          samba.yaml: |-
            ---
            auth:
              - user: spencer
                group: spencer
                uid: 1000
                gid: 1000
                password_file: /run/secrets/spencer_password
            share:
              - name: media
                path: /mnt/media
                browsable: yes
                writable: yes
                readonly: no
                guestok: no
                validusers: spencer
                writelist: spencer
                veto: no
                hidefiles: /_*/
                recycle: yes
                force user: 1000
              - name: player
                path: /mnt/player
                browsable: yes
                readonly: no
                guestok: no
                public: yes
                validusers: spencer
                writelist: spencer
                veto: no
                hidefiles: /_*/
                recycle: yes
                force user: spencer
              - name: documents
                security: user
                path: /mnt/documents
                browsable: yes
                readonly: no
                guestok: no
                validusers: spencer
                writelist: spencer
                veto: no
                hidefiles: /_*/
                recycle: yes
              - name: pictures
                path: /mnt/pictures
                browsable: yes
                readonly: no
                guestok: no
                validusers: spencer
                writelist: spencer
                veto: no
                hidefiles: /_*/
                recycle: yes
              - name: backups
                create mask: 666
                directory mask: 777
                path: /mnt/backups
                browsable: yes
                readonly: no
                guestok: no
                validusers: spencer
                writelist: spencer
                veto: no
                hidefiles: /_*/
                recycle: yes

    persistence:
      users:
        type: secret
        name: keycloak-secret
        advancedMounts:
          samba:
            main:
              - path: /run/secrets/spencer_password
                subPath: KEYCLOAK_ADMIN_PASSWORD
                readOnly: true
        
      config:
        name: "{{ .Release.Name }}-samba-samba-config"
        type: configMap
        advancedMounts:
          samba:
            main:
              - path: /data/config.yml
                subPath: samba.yaml
                readOnly: true
      media:
        existingClaim: media-shared
        globalMounts:
          - path: /mnt/media
      player:
        existingClaim: player-shared
        globalMounts:
          - path: /mnt/player
      pictures:
        existingClaim: pictures-shared
        globalMounts:
          - path: /mnt/pictures
      documents:
        existingClaim: documents-shared
        globalMounts:
          - path: /mnt/documents-shared
      backups:
        existingClaim: backups-shared
        globalMounts:
          - path: /mnt/backups
