# BitwardenIds moved to cluster secret annotation (metadata.annotations.services.gpu.bitwardenIds)
# The YAML block is parsed and each key-value pair becomes individual Helm parameters
# This allows charts to access values like: {{ index .Values "bitwardenIds" "coder-pg" }}
# Example cluster annotation:
# metadata.annotations.services.gpu.bitwardenIds: |
#   open-webui-sso-secret: "12345678-1234-1234-1234-123456789abc"
#   open-webui-secret: "87654321-4321-4321-4321-cba987654321"
#   open-webui-pg: "11111111-2222-3333-4444-555555555555"
#   coder-sso-secret: "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"
#   coder-pg: "ffffffff-gggg-hhhh-iiii-jjjjjjjjjjjj"
bitwardenIds:
  open-webui-sso-secret: OVERRIDE_VIA_CLUSTER_ANNOTATION
  open-webui-secret: OVERRIDE_VIA_CLUSTER_ANNOTATION
  open-webui-pg: OVERRIDE_VIA_CLUSTER_ANNOTATION
  coder-sso-secret: OVERRIDE_VIA_CLUSTER_ANNOTATION
  coder-pg: OVERRIDE_VIA_CLUSTER_ANNOTATION

seaweedfs-csi-driver:
  seaweedfsFiler: OVERRIDE_VIA_CLUSTER_ANNOTATIONS

domain: OVERRIDE_VIA_APPSET
clusterName: OVERRIDE_VIA_APPSET
ssoDomain: OVERRIDE_VIA_APPSET
ssoPathPrefix: OVERRIDE_VIA_APPSET

# Configuration for optional components
# Note: appset.includeBase is now controlled via cluster annotations (metadata.annotations.services.gpu.includeBase)
# and will default to "false" if not specified in the cluster secret
appset:
  includeBase: true  # This value is overridden by cluster annotations

# Sync policy configuration
# Note: selfHeal is now dynamically controlled via cluster annotations (metadata.annotations.services.gpu.selfHeal)
# and will default to true if not specified in the cluster secret
# The main ApplicationSet uses the cluster annotation directly for its selfHeal setting
syncPolicy:
  selfHeal: false  # This value is overridden by cluster annotations (cluster annotation defaults to true)

# SeaweedFS configuration
seaweedfs:
  volumeCount: 5  # Number of seaweedfs volume servers to configure DNS rewrites for

ingress:
  dashboardProvider: homepage  # Set to "homepage" to enable Homepage annotations on ingress objects
  subdomains:
    ollama:
      serviceName: brains
      service: gpu-ollama
      port: 11434

    open-webui:
      serviceName: ai
      service: open-webui
      port: 80
      # Homepage integration example
      homepageEnabled: "true"
      homepageGroup: "AI Tools"
      homepageName: "Open WebUI"
      homepageDescription: "AI Chat Interface"
      homepageIcon: "open-webui.png"
      homepageWeight: "10"

    coder:
      serviceName: code
      service: coder
      port: 80
      # Homepage integration example
      homepageEnabled: "true"
      homepageGroup: "Development"
      homepageName: "Coder"
      homepageDescription: "Cloud Development Environment"
      homepageIcon: "coder.png"
      homepageWeight: "20"

    flowise:
      serviceName: flow
      service: flowise
      port: 3000
      # Homepage integration example
      homepageEnabled: "true"
      homepageGroup: "AI Tools"
      homepageName: "Flowise"
      homepageDescription: "Visual AI Flow Builder"
      homepageIcon: "flowise.png"
      homepageWeight: "30"

    langflow:
      serviceName: langflow
      service: langflow
      port: 7860

    n8n:
      serviceName: n8n
      service: n8n
      port: 5678

    qdrant:
      serviceName: qdrant
      service: qdrant
      port: 6333

    neo4j:
      serviceName: neo4j
      service: neo4j
      port: 7474

    langfuse:
      serviceName: langfuse
      service: langfuse
      port: 3000

    searxng:
      serviceName: searxng
      service: searxng
      port: 8080

    supabase:
      serviceName: supabase
      service: supabase
      port: 3000

    archon:
      serviceName: archon
      service: archon
      port: 3737

    cluster:
      clusterBase: true
      service: base-argocd-server
      port: 80
    traefik:
      clusterBase: true
      namespace: kube-system
      service: traefik
      port: 8080

ollama:
  gpu:
    # -- Enable GPU integration
    enabled: true
    
    # -- GPU type: 'nvidia' or 'amd'
    type: 'amd'
    
    # -- Specify the number of GPU to 1
    number: 1

  resources:
    limits:
      amd.com/gpu: 1 # requesting a GPU
  image:
    repository: ollama/ollama
    tag: 0.11.4-rocm

  extraEnv:
    - name: OLLAMA_NUM_GPU
      value: "10"
    - name: OLLAMA_LOW_VRAM
      value: "true"  

  persistentVolume:
    enabled: true

open-webui:
  annotations:
    reloader.stakater.com/auto: "true"
  #replicaCount: 1
  resources:
    requests:
      cpu: 15m
      memory: 700Mi
    limits:
      cpu: 200m
      memory: 1Gi
  copyAppData:
    resources: {}
  ollama:
    enabled: false
  ollamaUrls: 
    - "http://gpu-ollama.default.svc.cluster.local:11434"
  pipelines:
    enabled: true
    persistence:
      existingClaim: open-webui-pipelines
  tika:
    enabled: true
    resources:
      requests:
        cpu: 15m
        memory: 650Mi
      limits:
        cpu: 100m
        memory: 800Mi
  websocket:
    enabled: true

  extraEnvFrom: 
    - secretRef:
        name: open-webui-secrets
  persistence:
    enabled: true
    existingClaim: open-webui
  podSecurityContext:
    supplementalGroups: 
      - 140
  containerSecurityContext:
    runAsUser: 1000
    runAsGroup: 150
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
    capabilities: 
      drop: 
        - "ALL"
    seccompProfile: 
      type: RuntimeDefault
coder: 
  coder:
    env:
      - name: CODER_OAUTH2_GITHUB_DEFAULT_PROVIDER_ENABLE
        value: "false"
      - name: CODER_OAUTH_GITHUB_ALLOW_SIGNUPS
        value: "false"
      - name: CODER_TELEMETRY
        value: "false"
      - name: CODER_PROMETHEUS_ENABLE
        value: 'true'
      - name: CODER_VERBOSE
        value: "true"
      
    envFrom:
      - secretRef:
          name: coder-secrets
    # This is needed because the Access URL is coming from envFrom
    envUseClusterAccessURL: false

    service:
      type: ClusterIP
