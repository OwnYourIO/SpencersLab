bitwardenIds:
  supabase: OVERRIDE_VIA_CUSTOM_VALUES
  supabase-pg: OVERRIDE_VIA_CUSTOM_VALUES

emptySecrets: false

domain: OVERRIDE_VIA_APPSET

app-template:
  global:
    nameOverride: &chartName supabase

  controllers:
    supabase:
      annotations:
        reloader.stakater.com/auto: "true"
      initContainers:
        migrate:
          image:
            repository: supabase/postgres
            tag: 17.6.1.004
          command: ["/bin/bash", "/scripts/migrate.sh"]
          env:
            PGDATABASE: supabase
            PGHOST: pg-supabase-rw
            TZ: Etc/UTC
          envFrom:
            - secretRef:
                name: pg-supabase-admin-secret
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
      containers:
        kong:
          image:
            repository: kong
            tag: 2.8.1
          env:
            KONG_DATABASE: "off"
            KONG_DECLARATIVE_CONFIG: /home/kong/kong.yml
            KONG_DNS_ORDER: "LAST,A,CNAME"
            KONG_PLUGINS: "request-transformer,cors,key-auth,acl,basic-auth,request-termination"
            KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: "160k"
            KONG_NGINX_PROXY_PROXY_BUFFERS: "64 160k"
            TZ: Etc/UTC
          envFrom:
            - secretRef:
                name: *chartName
          command: ["/bin/sh", "-c"]
          args:
            - |
              #!/bin/sh
              eval "echo \"$(cat /home/kong/tmp.yml)\"" > /home/kong/kong.yml
              /docker-entrypoint.sh kong docker-start
          probes:
            liveness:
              enabled: true
            readiness:
              enabled: true
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
        auth:
          image:
            repository: supabase/gotrue
            tag: v2.158.1
          env:
            GOTRUE_API_HOST: "0.0.0.0"
            GOTRUE_API_PORT: "9999"
            GOTRUE_DB_DRIVER: "postgres"
            GOTRUE_JWT_ADMIN_ROLES: "service_role"
            GOTRUE_JWT_AUD: "authenticated"
            GOTRUE_JWT_DEFAULT_GROUP_NAME: "authenticated"
            GOTRUE_JWT_EXP: "3600"
            TZ: Etc/UTC
          envFrom:
            - secretRef:
                name: *chartName
          probes:
            liveness:
              enabled: true
            readiness:
              enabled: true
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
        rest:
          image:
            repository: postgrest/postgrest
            tag: v12.2.0
          env:
            PGRST_DB_SCHEMAS: "public,storage,graphql_public"
            PGRST_DB_ANON_ROLE: "anon"
            PGRST_DB_USE_LEGACY_GUCS: "false"
            PGRST_APP_SETTINGS_JWT_EXP: "3600"
            # This needs to be different than the studio port.
            # By default they both run on 3000 and at the pod level conflict. 
            # Much eaiser to change here.
            PGRST_SERVER_PORT: "3001"
            TZ: Etc/UTC
          envFrom:
            - secretRef:
                name: *chartName
          probes:
            liveness:
              enabled: true
            readiness:
              enabled: true
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
        realtime:
          image:
            repository: supabase/realtime
            tag: v2.47.4
          env:
            PORT: "4000"
            DB_AFTER_CONNECT_QUERY: "SET search_path TO _realtime"
            ERL_AFLAGS: "-proto_dist inet_tcp"
            ENABLE_TAILSCALE: "false"
            DNS_NODES: "''"
            TZ: Etc/UTC
            DB_HOST: pg-supabase-rw
            DB_PORT: 5432
            DB_NAME: supabase
            DB_USER: supabase_admin
            RLIMIT_NOFILE: "10000"
            APP_NAME: realtime
            SEED_SELF_HOST: true
            RUN_JANITOR: true
          envFrom:
            - secretRef:
                name: *chartName
          probes:
            liveness:
              enabled: true
            readiness:
              enabled: true
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              memory: 1Gi
        redis:
          image:
            repository: redis
            tag: 8.2.0
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
            limits:
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
        studio:
          image:
            repository: supabase/studio
            tag: 2025.09.15-sha-6cff20b
          env:
            STUDIO_PG_META_URL: "http://gpu-supabase:8080"
            SUPABASE_URL: "http://gpu-supabase:8000"
            NEXT_PUBLIC_ENABLE_LOGS: "true"
            NEXT_ANALYTICS_BACKEND_PROVIDER: "postgres"
            TZ: Etc/UTC
          envFrom:
            - secretRef:
                name: *chartName
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /api/platform/profile
                  port: 3000
                initialDelaySeconds: 30
                periodSeconds: 30
                timeoutSeconds: 10
                failureThreshold: 3
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /api/platform/profile
                  port: 3000
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 5
                failureThreshold: 3
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
        meta:
          image:
            repository: supabase/postgres-meta
            tag: v0.91.7
          env:
            PG_META_PORT: "8080"
            PG_META_DB_HOST: "pg-supabase-rw"
            PG_META_DB_PORT: "5432"
            PG_META_DB_NAME: "supabase"
            TZ: Etc/UTC
          envFrom:
            - secretRef:
                name: *chartName
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /health
                  port: 8080
                initialDelaySeconds: 30
                periodSeconds: 30
                timeoutSeconds: 10
                failureThreshold: 3
            readiness:
              enabled: true
              custom: true
              spec:
                httpGet:
                  path: /health
                  port: 8080
                initialDelaySeconds: 5
                periodSeconds: 10
                timeoutSeconds: 5
                failureThreshold: 3
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
  service:
    supabase:
      controller: *chartName
      ports:
        kong:
          port: 8000
        auth:
          port: 9999
        storage:
          port: 5000
        functions:
          port: 9000
        rest:
          port: 3001
        realtime:
          port: 4000
        meta:
          port: 8080
        studio:
          port: 3000
      
  persistence:
    kong-home:
      type: emptyDir
      medium: "Memory"
      sizeLimit: 1Gi
      globalMounts:
        - path: /home/kong/
    storage:
      existingClaim: *chartName
      globalMounts:
        - path: /var/lib/storage
    kong-conf:
      enabled: true
      type: configMap
      name: '{{ .Release.Name }}-kong-conf'
      defaultMode: 0777
      globalMounts:
        - path: /home/kong/tmp.yml
          subPath: kong.conf
    migrate-init-scripts:
      type: emptyDir
      advancedMounts:
        supabase:
          migrate:
            - path: /docker-entrypoint-initdb.d/init-scripts
    migrate-script:
      enabled: true
      type: configMap
      name: '{{ .Release.Name }}-migrate-script'
      defaultMode: 0755
      advancedMounts:
        supabase:
          migrate:
            - path: /scripts/migrate.sh
              subPath: migrate.sh

  configMaps:
    kong-conf:
      #enabled: true
      data:
        kong.conf: |-
          _format_version: '2.1'
          _transform: true

          ###
          ### Consumers / Users
          ###
          consumers:
            - username: DASHBOARD
            - username: anon
              keyauth_credentials:
                - key: $SUPABASE_ANON_KEY
            - username: service_role
              keyauth_credentials:
                - key: $SUPABASE_SERVICE_KEY

          ###
          ### Access Control List
          ###
          acls:
            - consumer: anon
              group: anon
            - consumer: service_role
              group: admin

          ###
          ### Dashboard credentials
          ###
          basicauth_credentials:
            - consumer: DASHBOARD
              username: $DASHBOARD_USERNAME
              password: $DASHBOARD_PASSWORD

          ###
          ### API Routes
          ###
          services:
            # Stubbed because these are built into studio but only provided in the cloud enviorment.
            - name: platform-api-stub
              url: http://studio:3000
              routes:
                - name: network-restrictions-stub
                  strip_path: false
                  paths:
                    - /api/v1/projects/default/network-restrictions
                - name: ssl-enforcement-stub
                  strip_path: false
                  paths:
                    - /api/v1/projects/default/ssl-enforcement
                - name: network-bans-stub
                  strip_path: false
                  paths:
                    - /api/v1/projects/default/network-bans/retrieve
                - name: customer-stub
                  strip_path: false
                  paths:
                    - /api/platform/organizations/default-org-slug/customer
              plugins:
                - name: request-termination
                  config:
                    status_code: 200
                    body: '{"data": null}'
                    content_type: application/json

            ## Open Auth routes
            - name: auth-v1-open
              url: http://gpu-supabase:9999/verify
              routes:
                - name: auth-v1-open
                  strip_path: true
                  paths:
                    - /auth/v1/verify
              plugins:
                - name: cors
            - name: auth-v1-open-callback
              url: http://gpu-supabase:9999/callback
              routes:
                - name: auth-v1-open-callback
                  strip_path: true
                  paths:
                    - /auth/v1/callback
              plugins:
                - name: cors
            - name: auth-v1-open-authorize
              url: http://gpu-supabase:9999/authorize
              routes:
                - name: auth-v1-open-authorize
                  strip_path: true
                  paths:
                    - /auth/v1/authorize
              plugins:
                - name: cors

            ## Secure Auth routes
            - name: auth-v1
              _comment: 'GoTrue: /auth/v1/* -> http://auth:9999/*'
              url: http://gpu-supabase:9999/
              routes:
                - name: auth-v1-all
                  strip_path: true
                  paths:
                    - /auth/v1/
              plugins:
                - name: cors
                - name: key-auth
                  config:
                    hide_credentials: false
                - name: acl
                  config:
                    hide_groups_header: true
                    allow:
                      - admin
                      - anon

            ## Secure REST routes
            - name: rest-v1
              _comment: 'PostgREST: /rest/v1/* -> http://rest:3001/*'
              url: http://gpu-supabase:3001/
              routes:
                - name: rest-v1-all
                  strip_path: true
                  paths:
                    - /rest/v1/
              plugins:
                - name: cors
                - name: key-auth
                  config:
                    hide_credentials: true
                - name: acl
                  config:
                    hide_groups_header: true
                    allow:
                      - admin
                      - anon

            ## Secure GraphQL routes
            - name: graphql-v1
              _comment: 'PostgREST: /graphql/v1/* -> http://rest:3001/rpc/graphql'
              url: http://gpu-supabase:3001/rpc/graphql
              routes:
                - name: graphql-v1-all
                  strip_path: true
                  paths:
                    - /graphql/v1
              plugins:
                - name: cors
                - name: key-auth
                  config:
                    hide_credentials: true
                - name: request-transformer
                  config:
                    add:
                      headers:
                        - Content-Profile:graphql_public
                - name: acl
                  config:
                    hide_groups_header: true
                    allow:
                      - admin
                      - anon

            ## Secure Realtime routes
            - name: realtime-v1-ws
              _comment: 'Realtime: /realtime/v1/* -> ws://realtime:4000/socket/*'
              url: http://gpu-supabase:4000/socket
              protocol: ws
              routes:
                - name: realtime-v1-ws
                  strip_path: true
                  paths:
                    - /realtime/v1/
              plugins:
                - name: cors
                - name: key-auth
                  config:
                    hide_credentials: false
                - name: acl
                  config:
                    hide_groups_header: true
                    allow:
                      - admin
                      - anon
            - name: realtime-v1-rest
              _comment: 'Realtime: /realtime/v1/* -> ws://realtime:4000/socket/*'
              url: http://gpu-supabase:4000/api
              protocol: http
              routes:
                - name: realtime-v1-rest
                  strip_path: true
                  paths:
                    - /realtime/v1/api
              plugins:
                - name: cors
                - name: key-auth
                  config:
                    hide_credentials: false
                - name: acl
                  config:
                    hide_groups_header: true
                    allow:
                      - admin
                      - anon
            ## Storage routes: the storage server manages its own auth
            - name: storage-v1
              _comment: 'Storage: /storage/v1/* -> http://storage:5000/*'
              url: http://gpu-supabase:5000/
              routes:
                - name: storage-v1-all
                  strip_path: true
                  paths:
                    - /storage/v1/
              plugins:
                - name: cors

            ## Edge Functions routes
            - name: functions-v1
              _comment: 'Edge Functions: /functions/v1/* -> http://functions:9000/*'
              url: http://gpu-supabase:9000/
              routes:
                - name: functions-v1-all
                  strip_path: true
                  paths:
                    - /functions/v1/
              plugins:
                - name: cors

            ## Analytics routes
            - name: analytics-v1
              _comment: 'Analytics: /analytics/v1/* -> http://logflare:4000/*'
              url: http://gpu-supabase:4000/
              routes:
                - name: analytics-v1-all
                  strip_path: true
                  paths:
                    - /analytics/v1/

            ## Secure Database routes
            - name: meta
              _comment: 'pg-meta: /pg/* -> http://pg-meta:8080/*'
              url: http://gpu-supabase:8080/
              routes:
                - name: meta-all
                  strip_path: true
                  paths:
                    - /pg/
              plugins:
                - name: key-auth
                  config:
                    hide_credentials: false
                - name: acl
                  config:
                    hide_groups_header: true
                    allow:
                      - admin

            ## Protected Dashboard - catch all remaining routes
            - name: dashboard
              _comment: 'Studio: /* -> http://studio:3000/*'
              url: http://gpu-supabase:3000/
              routes:
                - name: dashboard-all
                  strip_path: true
                  paths:
                    - /
              plugins:
                - name: cors
                - name: basic-auth
                  config:
                    hide_credentials: true
    migrate-script:
      enabled: true
      data:
        migrate.sh: |-
          #!/bin/bash
          set -e

          env | grep -i post
          env | grep -i pg

          
          echo "Starting database migrations..."
          
          # Migration directory
          MIGRATION_DIR="/docker-entrypoint-initdb.d/migrations"
          
          # Check if migration directory exists
          if [ ! -d "$MIGRATION_DIR" ]; then
            echo "Migration directory $MIGRATION_DIR does not exist. Creating it..."
            mkdir -p "$MIGRATION_DIR"
          fi
          
          # Check if there are any SQL files to process
          if ! ls "$MIGRATION_DIR"/*.sql >/dev/null 2>&1; then
            echo "No SQL migration files found in $MIGRATION_DIR"
            echo "Migration completed successfully (no files to process)"
            exit 0
          fi
          
          # Run each SQL file in the migrations directory
          for sql in "$MIGRATION_DIR"/*.sql; do
            if [ -f "$sql" ]; then
              # Get the filename without path
              filename=$(basename "$sql")
              
              # Skip excluded files
              if [ "$filename" = "10000000000000_demote-postgres.sql" ]; then
                echo "Skipping excluded file: $sql"
                continue
              fi
              
              echo "Running migration: $sql"
              psql -v ON_ERROR_STOP=1 -f "$sql"
              echo "Completed migration: $sql"
            fi
          done
          
          echo "All database migrations completed successfully!"
