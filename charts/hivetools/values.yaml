# Configuration for hivetools - Combined ToolHive CRDs and Operator
# This chart deploys both the CRDs and the operator in a single installation

# Global namespace for ToolHive components
# The operator will be deployed to this namespace
namespace: default

# Domain for MCP ingress (override via custom-values)
domain: OVERRIDE_VIA_CUSTOM_VALUES

# Bitwarden secret IDs
bitwardenIds:
  github-mcp: OVERRIDE_VIA_CUSTOM_VALUES

# Shared storage configuration
# When set, overrides the default PVC for knowledge storage
# Example:
# shared-storage:
#   knowledge:
#     pvc-name: knowledge-shared
#     provider: seaweedfs
shared-storage: {}

# Configuration for toolhive-operator-crds subchart
# This subchart installs the Custom Resource Definitions
toolhive-operator-crds:
  enabled: true

# Configuration for toolhive-operator subchart
# This subchart installs the ToolHive operator
toolhive-operator:
  enabled: true
  podAnnotations:
    argocd.argoproj.io/sync-wave: "1"
  
  operator:
    # Number of operator replicas
    replicaCount: 1
    
    
    # RBAC configuration
    rbac:
      # Deployment mode: 'cluster' or 'namespace'
      # - cluster: Operator has cluster-wide access (default, simpler)
      # - namespace: Operator restricted to specific namespaces (more secure)
      scope: 'cluster'
      
      # Only used when scope is 'namespace'
      # List of namespaces the operator can manage
      # allowedNamespaces:
      #   - 'default'
      #   - 'gpu-workloads'

# Default MCP Servers
# Each server can be enabled/disabled independently
mcp:
  # Playwright MCP Server - Browser automation
  playwright:
    enabled: true
    # TODO: This should be versioned, but microsoft is only shipping latest >_<.
    image: mcr.microsoft.com/playwright/mcp:latest
    transport: streamable-http
    port: 8080
    targetPort: 8080
    resources:
      limits:
        cpu: '200m'
        memory: '256Mi'
      requests:
        cpu: '100m'
        memory: '128Mi'
    podTemplateSpec:
      spec:
        containers:
        - name: mcp
          command: ["node"]
          args:
            - "cli.js"
            - "--browser"
            - "firefox"
            - "--headless"
            - "--port"
            - "8080"
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /.cache
            - name: output
              mountPath: /output
        volumes:
          # Critical: /tmp for browser profiles and temporary data
          - name: tmp
            emptyDir:
              medium: Memory
              sizeLimit: 512Mi
          
          # Browser cache directory
          - name: cache
            emptyDir:
              sizeLimit: 1Gi
          
          # Optional: Output directory for traces/videos
          - name: output
            emptyDir:
              sizeLimit: 500Mi

  # Git MCP Server - Local git operations
  git:
    enabled: true
    # TODO: This should be versioned, but microsoft is only shipping latest >_<.
    image: mcp/git:latest
    transport: stdio
    port: 8080
    resources:
      limits:
        cpu: '100m'
        memory: '128Mi'
      requests:
        cpu: '50m'
        memory: '64Mi'
    # TODO: It's also requiring the container run as root >_<.
    podTemplateSpec:
      spec:
        containers:
        - name: mcp
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            runAsNonRoot: false

  # GitHub MCP Server - GitHub API operations
  github:
    enabled: true
    image: ghcr.io/github/github-mcp-server:v0.19.1
    transport: stdio
    port: 8080
    resources:
      limits:
        cpu: '100m'
        memory: '128Mi'
      requests:
        cpu: '50m'
        memory: '64Mi'
    secrets:
      - name: github-mcp
        key: GITHUB_PERSONAL_ACCESS_TOKEN
        targetEnvName: GITHUB_PERSONAL_ACCESS_TOKEN

  # Fetch MCP Server - HTTP fetching and web scraping
  fetch:
    enabled: true
    # TODO: This should be versioned, but microsoft is only shipping latest >_<.
    image: mcp/fetch
    transport: stdio
    port: 8080
    targetPort: 8080
    resources:
      limits:
        cpu: '100m'
        memory: '128Mi'
      requests:
        cpu: '50m'
        memory: '64Mi'
    # TODO: It's also requiring the container run as root >_<.
    podTemplateSpec:
      spec:
        containers:
        - name: mcp
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            runAsNonRoot: false

  # Filesystem MCP Server - File system operations
  filesystem:
    enabled: true
    # TODO: This should be versioned, but microsoft is only shipping latest >_<.
    image: mcp/filesystem:latest
    transport: stdio
    port: 8080
    resources:
      limits:
        cpu: '100m'
        memory: '128Mi'
      requests:
        cpu: '50m'
        memory: '64Mi'
    podTemplateSpec:
      spec:
        volumes:
          - name: knowledge
            persistentVolumeClaim:
              claimName: knowledge-shared
        containers:
          - name: mcp
            # Pass /knowledge directory as allowed directory for filesystem operations
            args:
              - "/knowledge"
            volumeMounts:
              - mountPath: /knowledge
                name: knowledge

  # 1MCP - One MCP Server for All
  # This acts as a proxy/gateway that can manage multiple MCP servers as subprocesses
  # Perfect for running non-containerized MCP servers (like docling) in a unified way
  onemcp:
    enabled: true
    image: ghcr.io/1mcp-app/agent:v0.26.1
    transport: streamable-http
    port: 3050
    targetPort: 3050
    resources:
      limits:
        cpu: '200m'
        memory: '256Mi'
      requests:
        cpu: '100m'
        memory: '128Mi'
    # Volume mount for 1MCP configuration directory
    # Required: 1MCP needs to write config to /home/node/.config/1mcp
    podTemplateSpec:
      spec:
        volumes:
          - name: onemcp-config
            emptyDir: {}
        containers:
          - name: mcp
            volumeMounts:
              - mountPath: /home/node/.config/1mcp
                name: onemcp-config

  # Sequential Thinking MCP Server
  sequential-thinking:
    enabled: true
    # TODO: This should be versioned, but microsoft is only shipping latest >_<.
    image: mcp/sequentialthinking:latest
    transport: stdio
    port: 8080
    resources:
      limits:
        cpu: '100m'
        memory: '128Mi'
      requests:
        cpu: '50m'
        memory: '64Mi'

  # Firecrawl MCP Server - Advanced web scraping
  firecrawl:
    enabled: false
    image: ghcr.io/mendableai/firecrawl-mcp
    transport: streamable-http
    port: 8080
    targetPort: 8080
    resources:
      limits:
        cpu: '200m'
        memory: '256Mi'
      requests:
        cpu: '100m'
        memory: '128Mi'
